# Building a Classification Model for the Iris data set

##ayush poddar
In this Jupyter notebook, we will be building a classification model for the Iris data set using the random forest algorithm.
## 1. Import libraries
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
## 2. Load the *iris* data set
iris = datasets.load_iris()
## 3. Input features
The ***iris*** data set contains 4 input features and 1 output variable (the class label).
### 3.1. Input features
print(iris.feature_names)
### 3.2. Output features
print(iris.target_names)
## 4. Glimpse of the data
### 4.1. Input features
iris.data
### 4.2. Output variable (the Class label)
iris.target
### 4.3. Assigning *input* and *output* variables
Let's assign the 4 input variables to X and the output variable (class label) to Y
X = iris.data
Y = iris.target
### 4.3. Let's examine the data dimension
X.shape
Y.shape
## 5. Build Classification Model using Random Forest
clf = RandomForestClassifier()
clf.fit(X, Y)
## 6. Feature Importance
print(clf.feature_importances_)
## 7. Make Prediction
X[0]
print(clf.predict([[5.1, 3.5, 1.4, 0.2]]))
print(clf.predict(X[[0]]))
print(clf.predict_proba(X[[0]]))
clf.fit(iris.data, iris.target_names[iris.target])
## 8. Data split (80/20 ratio)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)
X_train.shape, Y_train.shape
X_test.shape, Y_test.shape
## 9. Rebuild the Random Forest Model
clf.fit(X_train, Y_train)
### 9.1. Performs prediction on single sample from the data set
print(clf.predict([[5.1, 3.5, 1.4, 0.2]]))
print(clf.predict_proba([[5.1, 3.5, 1.4, 0.2]]))
### 9.2. Performs prediction on the test set
#### *Predicted class labels*
print(clf.predict(X_test))
#### *Actual class labels*
print(Y_test)
## 10. Model Performance
print(clf.score(X_test, Y_test))
